import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
dat = pd.read_csv('indians-diabetes.csv')
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
names = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']

df = pd.read_csv(url, names=names)
print(df)
# Pregnancies - Number of times pregnant - Numeric
# Glucose - Plasma glucose concentration a 2 hours in an oral glucose tolerance test - Numeric
# BloodPressure - Diastolic blood pressure (mm Hg) - Numeric
# SkinThickness - Triceps skin fold thickness (mm) - Numeric
# Insulin - 2-Hour serum insulin (mu U/ml) - Numeric
# BMI - Body mass index (weight in kg/(height in m)^2) - Numeric
# DiabetesPedigreeFunction - Diabetes pedigree function - Numeric
# Age - Age (years) - Numeric
# Outcome - Class variable (0 or 1) - Numeric

#print(df)
#df.boxplot()
#df.hist()
#df.groupby('class').hist()
#plt.show()
df.groupby('class').age.hist(alpha=0.4)#alpfa daet prozrachnost te kto mladshe boleet menshe
df.groupby('class').preg.hist(alpha=0.6)
df.groupby('class').mass.hist(alpha=0.8)
#plt.show()
def stratified_split(y, proportion=0.8):
    y = np.array(y)
    train_inds = np.zeros(len(y), dtype=bool)
    test_inds = np.zeros(len(y), dtype=bool)

    values = np.unique(y)
    for value in values:
        value_inds = np.nonzero(y == value)[0]#indexi nenulevich elementov
        np.random.shuffle(value_inds)

        n = int(proportion * len(value_inds))

        train_inds[value_inds[:n]] = True
        test_inds[value_inds[n:]] = True

    return train_inds, test_inds

train, test = stratified_split(df['class'])
print(train,' \n', test)
X_train = df.iloc[train, 0:8]#vozvrachaet ryadi massiva po indexam
X_test = df.iloc[test, 0:8]
#print(X_train)

y_train = df['class'][train]
y_test = df['class'][test]
#plt.show()
from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression()
logreg.fit(X_train, y_train)
y_pred = logreg.predict(X_test)
def accuracy(y_test, y_pred):
    return 1 - sum(abs(y_test - y_pred)/len(y_test))
print(accuracy(y_test, y_pred))
# normalizacija
def norm_arr(arr):
    mean = arr.mean()
    std = arr.std()

    normalized = (arr - mean) / std
    return normalized


def norm_df(df):
    result = df.copy()

    for feature in df.columns:
        result[feature] = norm_arr(result[feature])

    return result


X_train = norm_df(df.iloc[train, 0:8])
X_test = norm_df(df.iloc[test, 0:8])
print(X_train,X_test)